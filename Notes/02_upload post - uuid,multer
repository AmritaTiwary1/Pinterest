post , image , caption -- upload = multer, uuid package

EXPRESS- MULTER DOCS

Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It is written on top of busboy for maximum efficiency

NOTE: Multer will not process any form which is not multipart (multipart/form-data).

Usage
Multer adds a body object and a file or files object to the request object. The body object contains the values of the text fields of the form, the file or files object contains the files uploaded via the form.

Basic usage example:

Don’t forget the enctype="multipart/form-data" in your form.

If in javascript file you would add these lines to access both the file and the body. It is important that you use the name field value from the form in your upload function. This tells multer which field on the request it should look for the files in. If these fields aren’t the same in the HTML form and on your server, your upload will fail:

const multer  = require('multer')
const upload = multer({ dest: './public/data/uploads/' })
app.post('/stats', upload.single('uploaded_file'), function (req, res) {
  // req.file is the name of your file in the form above, here 'uploaded_file'
  // req.body will hold the text fields, if there were any 
  console.log(req.file, req.body)
});
API
File information
Each file contains the following information:

Key	Description	Note

fieldname	---  Field name specified in the form	 
originalname	---  Name of the file on the user’s computer	 
encoding	---  Encoding type of the file	 
mimetype	---  Mime type of the file	 
size	---  Size of the file in bytes	 
destination	---  The folder to which the file has been saved	DiskStorage
filename	---  The name of the file within the destination	DiskStorage
path	---  The full path to the uploaded file	DiskStorage
buffer	---  A Buffer of the entire file	MemoryStorage
multer(opts)
Multer accepts an options object, the most basic of which is the dest property, which tells Multer where to upload the files. In case you omit the options object, the files will be kept in memory and never written to disk.

By default, Multer will rename the files so as to avoid naming conflicts. The renaming function can be customized according to your needs.

The following are the options that can be passed to Multer.

Key	Description --
dest or storage	Where to store the files
fileFilter	Function to control which files are accepted
limits	Limits of the uploaded data
preservePath	Keep the full path of files instead of just the base name
In an average web app, only dest might be required, and configured as shown in the following example.

const upload = multer({ dest: 'uploads/' })
If you want more control over your uploads, you’ll want to use the storage option instead of dest. Multer ships with storage engines DiskStorage and MemoryStorage; More engines are available from third parties.

WARNING: Make sure that you always handle the files that a user uploads. Never add multer as a global middleware since a malicious user could upload files to a route that you didn’t anticipate. Only use this function on routes where you are handling the uploaded files.

storage
DiskStorage
The disk storage engine gives you full control on storing files to disk. --The disk storage provided by the Multer package refers to the server-side disk storage, which is controlled by the developer. This means that when files are uploaded, they are stored on the server's disk, not on the user's local disk. The developer has full control over the storage destination and configuration, allowing them to specify the upload directory, file naming conventions, and other storage settings. This server-side storage is typically used for temporary or permanent storage of uploaded files, and the developer can then choose to serve these files from the server or perform additional processing on them.

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, '/tmp/my-uploads')
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
    cb(null, file.fieldname + '-' + uniqueSuffix)
  }
})

const upload = multer({ storage: storage })
There are two options available, destination and filename. They are both functions that determine where the file should be stored.

destination is used to determine within which folder the uploaded files should be stored. This can also be given as a string (e.g. '/tmp/uploads'). If no destination is given, the operating system’s default directory for temporary files is used.

Note: You are responsible for creating the directory when providing destination as a function. When passing a string, multer will make sure that the directory is created for you.

filename is used to determine what the file should be named inside the folder. If no filename is given, each file will be given a random name that doesn’t include any file extension.

Note: Multer will not append any file extension for you, your function should return a filename complete with an file extension.

Each function gets passed both the request (req) and some information about the file (file) to aid with the decision.

Note that req.body might not have been fully populated yet. It depends on the order that the client transmits fields and files to the server.

For understanding the calling convention used in the callback (needing to pass null as the first param), refer to Node.js error handling